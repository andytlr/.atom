(function() {
  var CONFIG_DEFAULTS, CONFIG_KEY_INTERVAL_MINUTES, MINIMUM_AUTO_UPDATE_BLOCK_DURATION_MINUTES, NAMESPACE, PackageUpdater, WARMUP_WAIT, fs, getFs, path;

  fs = null;

  path = null;

  PackageUpdater = null;

  getFs = function() {
    return fs != null ? fs : fs = require('fs-plus');
  };

  NAMESPACE = 'auto-update-packages';

  CONFIG_KEY_INTERVAL_MINUTES = 'intervalMinutes';

  CONFIG_DEFAULTS = {};

  CONFIG_DEFAULTS[CONFIG_KEY_INTERVAL_MINUTES] = 6 * 60;

  WARMUP_WAIT = 10 * 1000;

  MINIMUM_AUTO_UPDATE_BLOCK_DURATION_MINUTES = 15;

  module.exports = {
    configDefaults: CONFIG_DEFAULTS,
    activate: function(state) {
      atom.workspaceView.command("" + NAMESPACE + ":update-now", (function(_this) {
        return function() {
          return _this.updatePackages(false);
        };
      })(this));
      return setTimeout((function(_this) {
        return function() {
          return _this.enableAutoUpdate();
        };
      })(this), WARMUP_WAIT);
    },
    deactivate: function() {
      this.disableAutoUpdate();
      return atom.workspaceView.off("" + NAMESPACE + ":update-now");
    },
    enableAutoUpdate: function() {
      this.updatePackagesIfAutoUpdateBlockIsExpired();
      this.autoUpdateCheck = setInterval((function(_this) {
        return function() {
          return _this.updatePackagesIfAutoUpdateBlockIsExpired();
        };
      })(this), this.getAutoUpdateCheckInterval());
      return this.configSubscription = atom.config.onDidChange((function(_this) {
        return function() {
          _this.disableAutoUpdate();
          return _this.enableAutoUpdate();
        };
      })(this));
    },
    disableAutoUpdate: function() {
      var _ref;
      if ((_ref = this.configSubscription) != null) {
        _ref.off();
      }
      this.configSubscription = null;
      if (this.autoUpdateCheck) {
        clearInterval(this.autoUpdateCheck);
      }
      return this.autoUpdateCheck = null;
    },
    updatePackagesIfAutoUpdateBlockIsExpired: function() {
      var lastUpdateTime;
      lastUpdateTime = this.loadLastUpdateTime() || 0;
      if (Date.now() > lastUpdateTime + this.getAutoUpdateBlockDuration()) {
        return this.updatePackages();
      }
    },
    updatePackages: function(isAutoUpdate) {
      if (isAutoUpdate == null) {
        isAutoUpdate = true;
      }
      if (PackageUpdater == null) {
        PackageUpdater = require('./package-updater');
      }
      PackageUpdater.updatePackages(isAutoUpdate);
      return this.saveLastUpdateTime();
    },
    getAutoUpdateBlockDuration: function() {
      var minutes;
      minutes = atom.config.get([NAMESPACE, CONFIG_KEY_INTERVAL_MINUTES].join('.'));
      if (minutes < MINIMUM_AUTO_UPDATE_BLOCK_DURATION_MINUTES) {
        minutes = MINIMUM_AUTO_UPDATE_BLOCK_DURATION_MINUTES;
      }
      return minutes * 60 * 1000;
    },
    getAutoUpdateCheckInterval: function() {
      return this.getAutoUpdateBlockDuration() / 15;
    },
    loadLastUpdateTime: function() {
      var string;
      try {
        string = getFs().readFileSync(this.getLastUpdateTimeFilePath());
        return parseInt(string);
      } catch (_error) {
        return null;
      }
    },
    saveLastUpdateTime: function() {
      return getFs().writeFileSync(this.getLastUpdateTimeFilePath(), Date.now().toString());
    },
    getLastUpdateTimeFilePath: function() {
      var dotAtomPath;
      if (path == null) {
        path = require('path');
      }
      dotAtomPath = getFs().absolute('~/.atom');
      return path.join(dotAtomPath, 'storage', "" + NAMESPACE + "-last-update-time");
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLGlKQUFBOztBQUFBLEVBQUEsRUFBQSxHQUFLLElBQUwsQ0FBQTs7QUFBQSxFQUNBLElBQUEsR0FBTyxJQURQLENBQUE7O0FBQUEsRUFFQSxjQUFBLEdBQWlCLElBRmpCLENBQUE7O0FBQUEsRUFJQSxLQUFBLEdBQVEsU0FBQSxHQUFBO3dCQUNOLEtBQUEsS0FBTSxPQUFBLENBQVEsU0FBUixFQURBO0VBQUEsQ0FKUixDQUFBOztBQUFBLEVBT0EsU0FBQSxHQUFZLHNCQVBaLENBQUE7O0FBQUEsRUFRQSwyQkFBQSxHQUE4QixpQkFSOUIsQ0FBQTs7QUFBQSxFQVVBLGVBQUEsR0FBa0IsRUFWbEIsQ0FBQTs7QUFBQSxFQVdBLGVBQWdCLENBQUEsMkJBQUEsQ0FBaEIsR0FBK0MsQ0FBQSxHQUFJLEVBWG5ELENBQUE7O0FBQUEsRUFhQSxXQUFBLEdBQWMsRUFBQSxHQUFLLElBYm5CLENBQUE7O0FBQUEsRUFjQSwwQ0FBQSxHQUE2QyxFQWQ3QyxDQUFBOztBQUFBLEVBZ0JBLE1BQU0sQ0FBQyxPQUFQLEdBQ0U7QUFBQSxJQUFBLGNBQUEsRUFBZ0IsZUFBaEI7QUFBQSxJQUVBLFFBQUEsRUFBVSxTQUFDLEtBQUQsR0FBQTtBQUNSLE1BQUEsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFuQixDQUEyQixFQUFBLEdBQUUsU0FBRixHQUFhLGFBQXhDLEVBQXNELENBQUEsU0FBQSxLQUFBLEdBQUE7ZUFBQSxTQUFBLEdBQUE7aUJBQ3BELEtBQUMsQ0FBQSxjQUFELENBQWdCLEtBQWhCLEVBRG9EO1FBQUEsRUFBQTtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBdEQsQ0FBQSxDQUFBO2FBR0EsVUFBQSxDQUFXLENBQUEsU0FBQSxLQUFBLEdBQUE7ZUFBQSxTQUFBLEdBQUE7aUJBQ1QsS0FBQyxD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
//# sourceURL=/Users/andytlr/.atom/packages/auto-update-packages/lib/auto-update-packages.coffee